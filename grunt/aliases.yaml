
# Default build
default:
    - newdev



# Build whole project for development
dev:
    - clean:build
    - jshint:dev
    - jscs
    - replace
    - stylus:dev
    - copy
    - jade:index
    - concat
    - autoprefixer
    - html2js:dev
    - ngAnnotate


# Same as dev but build only what changed
newdev:
    - newer:jshint:dev
    - newer:jscs
    - newer:replace
    - stylus:dev
    - newer:copy
    - newer:jade:index
    - concat
    - autoprefixer
    - html2js:dev
    - ngAnnotate



# Distribution build: same as dev + uglify
dist:
    - clean:build
    - jshint:dist
    - jscs
    - replace
    - stylus:dist
    - copy
    - jade:index
    - concat
    - autoprefixer
    - ngAnnotate
    - html2js:dist
    - uglify:dist



# Generate documentation and stats
doc:
    - clean:doc
    - groc
    - plato



# Build then start a web server and open index.html
serve:
  - dev
  - connect:dev:keepalive

# Build then start a web server, a watcher and open index.html
wserve:
  - dev
  - concurrent:serve



# Build then launch karma in single run mode for Chrome and Firefox.
# Suitable for CI.
test:
  - dev
  - karma:dev

# Build then launch karma in watch mode for Chrome only and a watcher (chokidar).
# Usually you want to test in one browser while developping and test all others after.
wtest:
  - dev
  - concurrent:wtest




# Build then launch a web server (connect) and protractor in single run mode for Chrome and Firefox
# Suitable for CI.
test_e2e:
  - dev
  - connect:test
  - exec:protractor

# While developping e2e tests, it is more suitable to use 'grunt wserve' to launch a web server and watch for changes in app files.
# Then you can use 'grunt exec:protractor' to launch protractor manually or directly :
# node node_modules/protractor/bin/protractor test/protractor.conf.js <options>

# Travis CI
test_travis:
  - dev
  - karma:travis
  - connect:test
  - exec:protractor_travis